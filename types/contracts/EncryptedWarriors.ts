/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EncryptedWarriorsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PLAYERS"
      | "attack"
      | "createGame"
      | "deployUnit"
      | "encryptedAttackerWins"
      | "encryptedDefenderWins"
      | "encryptedIsDraw"
      | "games"
      | "getCombatResult"
      | "getEncryptedCombatResults"
      | "getGame"
      | "getMyEncryptedUnitStats"
      | "joinGame"
      | "lastCombatOutcome"
      | "owner"
      | "player1"
      | "player2"
      | "playerGameCode"
      | "playersJoined"
      | "playersWarriors"
      | "submitCombatOutcome"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CombatConcluded"
      | "EncryptedCombatResultsStored"
      | "GameCreated"
      | "PlayerJoined"
      | "PublicOutcomeSubmitted"
      | "UnitDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attack",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployUnit",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedAttackerWins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedDefenderWins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedIsDraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getCombatResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedCombatResults",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGame", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getMyEncryptedUnitStats",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "joinGame", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "lastCombatOutcome",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "player1", values?: undefined): string;
  encodeFunctionData(functionFragment: "player2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerGameCode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playersJoined",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playersWarriors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitCombatOutcome",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployUnit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encryptedAttackerWins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedDefenderWins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedIsDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCombatResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedCombatResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyEncryptedUnitStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastCombatOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerGameCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playersJoined",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playersWarriors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitCombatOutcome",
    data: BytesLike
  ): Result;
}

export namespace CombatConcludedEvent {
  export type InputTuple = [
    attacker: AddressLike,
    defender: AddressLike,
    outcome: BigNumberish
  ];
  export type OutputTuple = [
    attacker: string,
    defender: string,
    outcome: bigint
  ];
  export interface OutputObject {
    attacker: string;
    defender: string;
    outcome: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EncryptedCombatResultsStoredEvent {
  export type InputTuple = [attacker: AddressLike, defender: AddressLike];
  export type OutputTuple = [attacker: string, defender: string];
  export interface OutputObject {
    attacker: string;
    defender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [code: BytesLike, creator: AddressLike];
  export type OutputTuple = [code: string, creator: string];
  export interface OutputObject {
    code: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [code: BytesLike, player: AddressLike];
  export type OutputTuple = [code: string, player: string];
  export interface OutputObject {
    code: string;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicOutcomeSubmittedEvent {
  export type InputTuple = [outcome: BigNumberish];
  export type OutputTuple = [outcome: bigint];
  export interface OutputObject {
    outcome: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnitDeployedEvent {
  export type InputTuple = [playerAddress: AddressLike];
  export type OutputTuple = [playerAddress: string];
  export interface OutputObject {
    playerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EncryptedWarriors extends BaseContract {
  connect(runner?: ContractRunner | null): EncryptedWarriors;
  waitForDeployment(): Promise<this>;

  interface: EncryptedWarriorsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  attack: TypedContractMethod<
    [_attacker: AddressLike, _defender: AddressLike],
    [void],
    "nonpayable"
  >;

  createGame: TypedContractMethod<[], [string], "nonpayable">;

  deployUnit: TypedContractMethod<
    [
      _encryptedAttack: BytesLike,
      _attackProof: BytesLike,
      _encryptedDefense: BytesLike,
      _defenseProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  encryptedAttackerWins: TypedContractMethod<[], [string], "view">;

  encryptedDefenderWins: TypedContractMethod<[], [string], "view">;

  encryptedIsDraw: TypedContractMethod<[], [string], "view">;

  games: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, boolean] & {
        creator: string;
        player2: string;
        started: boolean;
      }
    ],
    "view"
  >;

  getCombatResult: TypedContractMethod<[], [bigint], "view">;

  getEncryptedCombatResults: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        attackerWins: string;
        defenderWins: string;
        isDraw: string;
      }
    ],
    "view"
  >;

  getGame: TypedContractMethod<
    [code: BytesLike],
    [[string, string, boolean]],
    "view"
  >;

  getMyEncryptedUnitStats: TypedContractMethod<
    [],
    [[string, string] & { encryptedAttack: string; encryptedDefense: string }],
    "view"
  >;

  joinGame: TypedContractMethod<[code: BytesLike], [void], "nonpayable">;

  lastCombatOutcome: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  player1: TypedContractMethod<[], [string], "view">;

  player2: TypedContractMethod<[], [string], "view">;

  playerGameCode: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  playersJoined: TypedContractMethod<[], [bigint], "view">;

  playersWarriors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean] & {
        encryptedAttack: string;
        encryptedDefense: string;
        deployed: boolean;
      }
    ],
    "view"
  >;

  submitCombatOutcome: TypedContractMethod<
    [_outcome: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "attack"
  ): TypedContractMethod<
    [_attacker: AddressLike, _defender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "deployUnit"
  ): TypedContractMethod<
    [
      _encryptedAttack: BytesLike,
      _attackProof: BytesLike,
      _encryptedDefense: BytesLike,
      _defenseProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encryptedAttackerWins"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "encryptedDefenderWins"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "encryptedIsDraw"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, boolean] & {
        creator: string;
        player2: string;
        started: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCombatResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEncryptedCombatResults"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        attackerWins: string;
        defenderWins: string;
        isDraw: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<
    [code: BytesLike],
    [[string, string, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyEncryptedUnitStats"
  ): TypedContractMethod<
    [],
    [[string, string] & { encryptedAttack: string; encryptedDefense: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[code: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastCombatOutcome"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerGameCode"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "playersJoined"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "playersWarriors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean] & {
        encryptedAttack: string;
        encryptedDefense: string;
        deployed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitCombatOutcome"
  ): TypedContractMethod<[_outcome: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CombatConcluded"
  ): TypedContractEvent<
    CombatConcludedEvent.InputTuple,
    CombatConcludedEvent.OutputTuple,
    CombatConcludedEvent.OutputObject
  >;
  getEvent(
    key: "EncryptedCombatResultsStored"
  ): TypedContractEvent<
    EncryptedCombatResultsStoredEvent.InputTuple,
    EncryptedCombatResultsStoredEvent.OutputTuple,
    EncryptedCombatResultsStoredEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PublicOutcomeSubmitted"
  ): TypedContractEvent<
    PublicOutcomeSubmittedEvent.InputTuple,
    PublicOutcomeSubmittedEvent.OutputTuple,
    PublicOutcomeSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "UnitDeployed"
  ): TypedContractEvent<
    UnitDeployedEvent.InputTuple,
    UnitDeployedEvent.OutputTuple,
    UnitDeployedEvent.OutputObject
  >;

  filters: {
    "CombatConcluded(address,address,uint8)": TypedContractEvent<
      CombatConcludedEvent.InputTuple,
      CombatConcludedEvent.OutputTuple,
      CombatConcludedEvent.OutputObject
    >;
    CombatConcluded: TypedContractEvent<
      CombatConcludedEvent.InputTuple,
      CombatConcludedEvent.OutputTuple,
      CombatConcludedEvent.OutputObject
    >;

    "EncryptedCombatResultsStored(address,address)": TypedContractEvent<
      EncryptedCombatResultsStoredEvent.InputTuple,
      EncryptedCombatResultsStoredEvent.OutputTuple,
      EncryptedCombatResultsStoredEvent.OutputObject
    >;
    EncryptedCombatResultsStored: TypedContractEvent<
      EncryptedCombatResultsStoredEvent.InputTuple,
      EncryptedCombatResultsStoredEvent.OutputTuple,
      EncryptedCombatResultsStoredEvent.OutputObject
    >;

    "GameCreated(bytes32,address)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "PlayerJoined(bytes32,address)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "PublicOutcomeSubmitted(uint8)": TypedContractEvent<
      PublicOutcomeSubmittedEvent.InputTuple,
      PublicOutcomeSubmittedEvent.OutputTuple,
      PublicOutcomeSubmittedEvent.OutputObject
    >;
    PublicOutcomeSubmitted: TypedContractEvent<
      PublicOutcomeSubmittedEvent.InputTuple,
      PublicOutcomeSubmittedEvent.OutputTuple,
      PublicOutcomeSubmittedEvent.OutputObject
    >;

    "UnitDeployed(address)": TypedContractEvent<
      UnitDeployedEvent.InputTuple,
      UnitDeployedEvent.OutputTuple,
      UnitDeployedEvent.OutputObject
    >;
    UnitDeployed: TypedContractEvent<
      UnitDeployedEvent.InputTuple,
      UnitDeployedEvent.OutputTuple,
      UnitDeployedEvent.OutputObject
    >;
  };
}
